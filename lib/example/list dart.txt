void main(){
  
  
//   var list1= [];
  
//   list1.add("raghu");
//   print( "add = $list1");
  
//   list1.addAll([1,2,3]);
//   print("addall = $list1");
  
//   print(list1.asMap());
  
//   print(list1);
  
//   list1.insert(0,"anandsir");
//   print(list1);
  
//   list1.insertAll(1,[12,13,14]);
//   print("$list1 \n");

//   List list =["ishan","deep","sahil",1];
  
//   print(list[0]);
//   print(list);
//   print(list.first);
//   print(list.length);
//   print(list.reversed);
//   print(list.isEmpty);
//   print(list.isNotEmpty);
//   print("$list.iterator \n");
  
//   list[1] = "krupa";
//   print(list);
  
//   list.removeAt(3);
//   print(list);
//   list.removeLast();
//   print(list);
//   list.addAll([1,2,3]);
//   print(list);
//   list.removeRange(2,4);
//   print(list);
//   list.remove(3);
//   print(list);
  
//   list.forEach((item){
//     print("$item");
//   });
  
//   list.forEach((item){
//     print("${list.indexOf(item)} = $item");
//   });
  
  
  
//   print(list.join(" "));
  
  
  
//   print(a[1].hashCode);
//   print(a[2].hashCode);
//   print(a[6].hashCode);
//   print(a[4].hashCode);
 
  
//   print(a.runtimeType);
//   print(a.iterator);
// //   print(a.any((element) => ,));
  
  
//   var fruits = [['apple','mango'],'banana'];
//    var fruit = fruits.iterator;
//    while(fruit.moveNext()){
//       print(fruit.current);
//    }
  
  
  
//   print(a.any());
  
//   List<dynamic> a=[["ishan" , "meet" ], "vivek" ,1 ,2 ,3 , 2.43];
  
  
//   print(a.any((v) {return v=="meet";}));
  
//     List basket1 = ['Mango', 'Apple'];
//   List basket2 = ['Orange', 'Avocado', 'Grape'];
//   List basket3 = ['Lemon'];
    
//   // converting the lists to an iterable
//   var newBasketIterable = [basket1, basket2, basket3].expand((x) => x);
  
//   var newBasket = newBasketIterable.toList();
    
//   print("Combined List:  $newBasket");
 
  
  
//   List numbers = [9, 5, 8, 17, 11, 15, 23];
  
//   print(numbers.indexOf(17));
  
  
  
  
  //   if (numbers.any((item) => item  7)) {

//     print('At least one number > 7 in the list');
//   }
  
//   print(numbers.asMap());
//   print(numbers.cast());
  
//   print(numbers.elementAt(1));
  
//   print(numbers.every((item) => item>2));
  
//   print(numbers.any((item) => item>5));
  
// //   print(numbers.expand())
  
//   numbers.fillRange(1,6,1);
//   print(numbers);
  
  //## Firstwhere method
  
 
//     List<String> fruits = ['Apple', 'Lemon', 'Avocado', 'Orange'];

//   var fav = fruits.firstWhere((item) => item.contains('Apple'), 
//       orElse: () => 'Fruit not available');
//   print(fav);

//   List languages = ["Dart" ,"Python" , "Java" , "C++", "C#"];
  
//    print(languages);   
 
//   var val = languages.firstWhere((item) => item.length > 3, orElse: () => null);
 
//   if ( null == val ) {
//     print('Language not found.');
//   }
//   print(val);  
    
    
//   List colors = ['blue', 'black', 'green', 'white', 'orange', 'pink'];
//   // get items from list colors
//   var myRange = colors.getRange(1, 4).toList();
//   // display result
//   print(myRange);

  
 
  
  List numbers = [9, 5, 8, 17, 11, 15, 23];
//   List num = [1,2,3,4,5,6,7];
//   numbers.insert(7,7);
  //   print(numbers.join(' '));
//     numbers.setRange(1,5,num,1);
//   print(numbers.);
  
  
//   final list = ['a', 'bb', 'ccc'];
// // compute the sum of all length
// list.fold(0, (t, e) => t + e.length); 
//   print(list);
  
  
  
  
//   List<dynamic> list = ["SomeString", 12];
// print(list);
// print(list.whereType<String>());
// print(list.where((item) => item is int));

  



  
  
//   final colors = <String>['red', 'green', 'blue', 'orange', 'pink'];
// print(colors.sublist(1, 3)); // [green, blue]
  
//   final colors = <String>['red', 'green', 'blue', 'orange', 'pink'];
// print(colors.sublist(3)); // [orange, pink]
  
  
  
  
//    var educativeSet = Set<String>();
   
//   educativeSet.add("courses"); 
//   educativeSet.add("answers");
//   educativeSet.add("educative");
//   educativeSet.add("assessments");
//   educativeSet.add("projects");

//   print('1.\tThe elements of the set are:\n\t $educativeSet');
//   var iterator = educativeSet.skipWhile((element) => element.length < 7);
//   print('2.\tAfter skipping the elements with length greater than 7: \n\t $iterator');
  
  
  
  
//    var educativeSet = Set<String>();
   
//   educativeSet.add("educative"); 
//   educativeSet.add("courses"); 
//   educativeSet.add("answers");
//   educativeSet.add("assessments");
//   educativeSet.add("projects");

//   var count = 4;
//   print('1.\tThe elements of the set are:\n\t $educativeSet');
//   var iterator = educativeSet.skip(count);
//   print('2.\tAfter skipping the $count elements: $iterator');
  
  
  
//   ListQueue queue = new ListQueue();

//   // add 3 elements to the queue
//   queue.add(10);
//   queue.add(20);
//   queue.add(30);
  
//   print('The queue is : $queue');
//   // Get the single element which is greater than 20
//   var result = queue.singleWhere( (e)=> e > 20 );
//   print('The single element which is greater than 20 : $result');

//   queue.add(40);
//     print('\nThe queue is : $queue');
//   // Get the single element which is greater than 20
//   try{
//     result = queue.singleWhere( (e)=> e > 20 );
//   }catch(e){
//     print(e);
//   }
  
  
  
  
//    var lst = [];
//    lst.add(12); 
// //    lst.add(10); 
//    print(lst.single); 
  
  
  
//   List<int> nums = [13, 2, -11];
// nums.sort();
//   print(nums)
// ;
  
//   var list = ['a', 'b', 'c', 'd'];

// list.shuffle();
// print(list.join(' '));
  
  
//   final list = <String>['a', 'b', 'c', 'd'];
// list.setAll(1, ['bee', 'sea', 'dea', 'eea']);
// print(list);
  
//   numbers.insertAll(8,);
//   print(numbers.insert());
  
  
  
//     List<String> book = ['Flutter Cookbook', 'Dart NoteBook', 'educative.io']; 
//   // returns index where the list 'book' endsWith 'k'
//   final int foundIndex = book.indexWhere((book) => book.endsWith('o'));
//   // Display result 
//   if (foundIndex != -1) {
//     print('Index: $foundIndex');
//   }
  
  
  
//    List<String> fruits = ['Apple', 'Lemon', 'Avocado', 'Orange', ' Lime', 'Lychee'];
 
//   var fav = fruits.lastWhere((item) => item.startsWith('L'), 
//       orElse: () => 'Fruit not available');
//   print(fav);
  
  
  
//   final List<Map<String, dynamic>> _student = [
//     {"name": "Elisa", "id": "15GH023",  "offeredCourse": 10},
//     {"name": "Maria", "id": "15GH086",  "offeredCourse": 8},
//     {"name": "Joe", "id": "15GH007",  "offeredCourse": 11},
//   ];

//   final foundIndex = _student.lastIndexWhere((e) => e["offeredCourse"] > 8);
  
//   if (foundIndex != -1) {
//     print("Index $foundIndex: ${_student[foundIndex]}");
//   }
  
  
//   var found;
//    var string = 'There are four apples in the basket';
  
//   found = string.lastIndexOf('a'); 

//   print('The character a is found at index ${found}');
  
 
  //reduce() method (of the Iterable class), as its name describes itself, executes a “reducer” callback function (provided by you) on each element of the collection, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the collection is a single value.
  
//    final myList = [1, 3, 5, 4, 9, 11, 0, -4, -10];
//   final result = myList.reduce((max, element){
//     if(max > element){
//       return max;
//     } else {
//       return element;
//     }
//   }); 
//   print(result);
//   final results = myList.reduce((max, element){
//   if(max < element){
//       return max;
//     } else {
//       return element;
//     }
//   }); 
//   print(results);
  
  
  
  
//   List<String> fruits = ["Orange","Apple", "Mango", "Banana", "Avocado"];
//    print('${fruits}');
//    // replace items using replaceRange() 
//    fruits.replaceRange(0,3,["Pineapple", "Pawpaw", "Lemon",]);

//   print('${fruits} \n'); 
  
  
  
  
//    List numbers = [2, 6, 23, 14, 34, 8, 12, 57, 41, 1, 6];
//   print('${numbers}');
//   numbers.retainWhere((item) => item > 10);
//   print('The new list after removing elements: ${numbers}');

//   List<String> names = ['Maria', 'Elizabeth', 'David', 'Elisa', 'Naomi', 'John', 'Joe'];
//   print('${names}');
//   names.retainWhere((item) => item.length >= 5);
//   print('The new list after removing elements: ${names}');
  
  
  
  
  
  
  
  
}
